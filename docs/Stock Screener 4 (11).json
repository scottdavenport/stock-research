{
  "name": "Stock Screener 4",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "3928ca93-6c9c-4b25-ba34-3d6991245531",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "266ea4f1-c825-40e5-a4f5-02628c2e401e",
      "name": "Screening Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2160,
        208
      ],
      "webhookId": "3928ca93-6c9c-4b25-ba34-3d6991245531"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e0e9de8f-edaf-4bc1-8904-8f4f60f1cec5",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1744,
        208
      ],
      "id": "5aa8afad-b58b-4a80-a384-806f7e783508",
      "name": "Check Security Result"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"error\": \"{{ $json.error || 'Authentication failed' }}\",\n  \"message\": \"{{ $json.message || 'Invalid or missing API key' }}\",\n  \"code\": \"UNAUTHORIZED\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {
          "responseCode": "={{ $json.status || 401 }}"
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1360,
        464
      ],
      "id": "805d6f72-8dd9-4591-8680-8264799140a1",
      "name": "Security Error Response"
    },
    {
      "parameters": {
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/stock_universe",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "is_active",
              "value": "eq.true"
            },
            {
              "name": "order",
              "value": "symbol.asc"
            },
            {
              "name": "limit",
              "value": "3"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "677482b9-30c1-4e78-a00e-8f5095971808",
      "name": "Fetch ALL Stocks from Supabase",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -992,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "const requestBody = $('Check Security Result').first().json.body || {};\nconst sessionResponse = $('Create Screening Session').first().json;\nconst allItems = $input.all();\nconst supabaseStocks = allItems.map(item => item.json);\n\n// Extract session ID from Supabase response (handle both object and string formats)\nconst sessionId = sessionResponse.data || sessionResponse;\nconst userEmail = requestBody.userEmail;\n\nconst sectorFilter = requestBody.sector || null;\nconst marketCapFilter = requestBody.marketCap || null;\nconst minScore = requestBody.minScore || 55;\n\nlet filteredStocks = supabaseStocks;\n\n// Fix filtering to handle both 'All Sectors'/'All Caps' and 'All'\nif (sectorFilter && sectorFilter !== 'All Sectors' && sectorFilter !== 'All') {\n  filteredStocks = filteredStocks.filter(stock => \n    stock && stock.sector === sectorFilter\n  );\n}\n\nif (marketCapFilter && marketCapFilter !== 'All Caps' && marketCapFilter !== 'All') {\n  filteredStocks = filteredStocks.filter(stock => \n    stock && stock.market_cap_tier === marketCapFilter\n  );\n}\n\nconst stocksToProcess = filteredStocks;\n\nreturn {\n  stocksToProcess: stocksToProcess,\n  currentIndex: 0,\n  results: [],\n  buyRatedResults: [],\n  totalStocks: stocksToProcess.length,\n  startTime: new Date().toISOString(),\n  sessionId: sessionId,\n  userEmail: userEmail,\n  filters: {\n    sector: sectorFilter,\n    marketCap: marketCapFilter,\n    minScore: minScore,\n    fullUniverseScreen: true\n  }\n};"
      },
      "id": "6827102a-bb5a-4b27-b996-30edcb9eec8e",
      "name": "Setup Full Universe Screening",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        208
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-more-stocks",
              "leftValue": "={{ $json.currentIndex }}",
              "rightValue": "={{ $json.stocksToProcess.length }}",
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9d195c66-e513-44dc-ab8f-3c7f046f2772",
      "name": "Has More Stocks?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -608,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $json;\nconst currentStockObject = data.stocksToProcess[data.currentIndex];\nconst currentSymbol = currentStockObject.symbol;\n\nconst progress = Math.round((data.currentIndex / data.totalStocks) * 100);\nconst elapsed = Math.round((new Date() - new Date(data.startTime)) / 1000);\n\nreturn {\n  ...data,\n  currentSymbol: currentSymbol,\n  currentStockInfo: {\n    symbol: currentStockObject.symbol,\n    name: currentStockObject.name,\n    sector: currentStockObject.sector,\n    marketCapTier: currentStockObject.market_cap_tier,\n    exchange: currentStockObject.exchange,\n    country: currentStockObject.country\n  },\n  progress: {\n    percent: progress,\n    current: data.currentIndex + 1,\n    total: data.totalStocks,\n    elapsedSeconds: elapsed\n  }\n};"
      },
      "id": "ea75e543-9295-40d6-98c8-e16607eb2613",
      "name": "Get Current Stock",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        96
      ]
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "seconds"
      },
      "id": "f7e60dd9-b83d-44f0-8079-5d813d56b815",
      "name": "Rate Limit Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        -208,
        96
      ],
      "webhookId": "545e379b-dad5-435c-ac0d-627c064fd6e8"
    },
    {
      "parameters": {
        "url": "https://finnhub.io/api/v1/quote",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.currentSymbol }}"
            },
            {
              "name": "token",
              "value": "={{ $vars.FINNHUB_API_KEY }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "3cedede8-be93-45d0-8787-b57c740125d4",
      "name": "Fetch Quote",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "unit": "seconds"
      },
      "id": "4bdc68d1-c867-4ff1-a05a-dc213f65e3bd",
      "name": "Wait Before Profile",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        192,
        0
      ],
      "webhookId": "2b993412-5371-442a-9fdf-d828d6f58d62"
    },
    {
      "parameters": {
        "url": "https://finnhub.io/api/v1/stock/profile2",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $('Get Current Stock').first().json.currentSymbol }}"
            },
            {
              "name": "token",
              "value": "={{ $vars.FINNHUB_API_KEY }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "b733444b-8ec3-4684-aa2c-a045c3a760e4",
      "name": "Fetch Profile",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        400,
        0
      ]
    },
    {
      "parameters": {
        "unit": "seconds"
      },
      "id": "a7fcbb5e-690b-4265-aa9e-0b28d0644d0a",
      "name": "Wait Before Metrics",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        592,
        0
      ],
      "webhookId": "9fd8bbcc-a6d7-4214-9c78-ce07717c61d9"
    },
    {
      "parameters": {
        "url": "https://finnhub.io/api/v1/stock/metric",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $('Get Current Stock').first().json.currentSymbol }}"
            },
            {
              "name": "metric",
              "value": "all"
            },
            {
              "name": "token",
              "value": "={{ $vars.FINNHUB_API_KEY }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "29374d19-db51-483c-a5fb-1a7e68f093fc",
      "name": "Fetch Metrics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        816,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "const headers = $json.headers || {};\nconst body = $json.body || {};\nlet providedKey = null;\n\n// Extract API key\nif (headers.authorization) {\n  if (headers.authorization.startsWith('Bearer ')) {\n    providedKey = headers.authorization.replace('Bearer ', '');\n  } else {\n    providedKey = headers.authorization;\n  }\n} else if (body.apiKey) {\n  providedKey = body.apiKey;\n}\n\nconst validKey = $vars.STOCK_SCREENER_API_KEY;\n\nif (!providedKey) {\n  return {\n    error: \"API key required\",\n    message: \"Please provide a valid API key\",\n    status: 401,\n    timestamp: new Date().toISOString()\n  };\n}\n\nif (providedKey !== validKey) {\n  return {\n    error: \"Invalid API key\",\n    message: \"The provided API key is not valid\",\n    status: 401,\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Validate user email is provided\nif (!body.userEmail) {\n  return {\n    error: \"User email required\",\n    message: \"Please provide a valid user email in the request body\",\n    status: 400,\n    timestamp: new Date().toISOString()\n  };\n}\n\nreturn $json;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1952,
        208
      ],
      "id": "040912c7-219c-4745-9a70-8ae20042ef29",
      "name": "Security & Email Validation"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/rpc/upsert_screening_session",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY\t }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.SUPABASE_ANON_KEY\t }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"p_user_email\": \"{{ $json.body.userEmail }}\",\n  \"p_filters\": {{ JSON.stringify($json.body) }},\n  \"p_screening_type\": \"full_universe\"\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1424,
        208
      ],
      "id": "0386eec6-11ae-402b-bbc4-2fe9ebe77948",
      "name": "Create Screening Session"
    },
    {
      "parameters": {
        "jsCode": "const data = $json;\nconst allResults = data.results.filter(r => r.score > 0);\n\n// Sort all results by score (highest first)\nallResults.sort((a, b) => b.score - a.score);\n\n// Add rankings to all results\nallResults.forEach((result, index) => {\n  result.rank = index + 1;\n});\n\n// Calculate comprehensive statistics\nconst ratingCounts = {\n  strongBuy: allResults.filter(r => r.rating === 'STRONG BUY').length,\n  buy: allResults.filter(r => r.rating === 'BUY').length,\n  weakBuy: allResults.filter(r => r.rating === 'WEAK BUY').length,\n  hold: allResults.filter(r => r.rating === 'HOLD').length,\n  weakSell: allResults.filter(r => r.rating === 'WEAK SELL').length,\n  sell: allResults.filter(r => r.rating === 'SELL').length,\n  strongSell: allResults.filter(r => r.rating === 'STRONG SELL').length\n};\n\n// Calculate buy-rated vs sell-rated\nconst buyRated = allResults.filter(r => ['STRONG BUY', 'BUY', 'WEAK BUY'].includes(r.rating));\nconst sellRated = allResults.filter(r => ['WEAK SELL', 'SELL', 'STRONG SELL'].includes(r.rating));\nconst holdRated = allResults.filter(r => r.rating === 'HOLD');\n\nconst summary = {\n  totalScreened: allResults.length,\n  totalBuyRated: buyRated.length,\n  totalSellRated: sellRated.length,\n  totalHoldRated: holdRated.length,\n  buyPercentage: allResults.length > 0 ? Number(((buyRated.length / allResults.length) * 100).toFixed(1)) : 0,\n  sellPercentage: allResults.length > 0 ? Number(((sellRated.length / allResults.length) * 100).toFixed(1)) : 0,\n  holdPercentage: allResults.length > 0 ? Number(((holdRated.length / allResults.length) * 100).toFixed(1)) : 0,\n  processingTime: `${Math.round((new Date() - new Date(data.startTime)) / 1000)} seconds`,\n  processingTimeSeconds: Math.round((new Date() - new Date(data.startTime)) / 1000),\n  averageScore: allResults.length > 0 ? Number((allResults.reduce((sum, r) => sum + r.score, 0) / allResults.length).toFixed(1)) : 0,\n  averageBuyScore: buyRated.length > 0 ? Number((buyRated.reduce((sum, r) => sum + r.score, 0) / buyRated.length).toFixed(1)) : 0,\n  averageSellScore: sellRated.length > 0 ? Number((sellRated.reduce((sum, r) => sum + r.score, 0) / sellRated.length).toFixed(1)) : 0,\n  filters: data.filters || {},\n  allRatings: ratingCounts,\n  scoreDistribution: {\n    above80: allResults.filter(r => r.score >= 80).length,\n    above70: allResults.filter(r => r.score >= 70).length,\n    above60: allResults.filter(r => r.score >= 60).length,\n    above50: allResults.filter(r => r.score >= 50).length,\n    above40: allResults.filter(r => r.score >= 40).length,\n    below40: allResults.filter(r => r.score < 40).length\n  },\n  sectorBreakdown: {},\n  exchangeBreakdown: {},\n  marketCapBreakdown: {}\n};\n\n// Calculate breakdowns for all results\nallResults.forEach(stock => {\n  summary.sectorBreakdown[stock.sector] = (summary.sectorBreakdown[stock.sector] || 0) + 1;\n  summary.exchangeBreakdown[stock.exchange] = (summary.exchangeBreakdown[stock.exchange] || 0) + 1;\n  summary.marketCapBreakdown[stock.marketCapTier] = (summary.marketCapBreakdown[stock.marketCapTier] || 0) + 1;\n});\n\n// Prepare screening results for database insert (ALL results)\nconst screeningResultsForDB = allResults.map(result => ({\n  symbol: result.symbol,\n  screening_date: new Date().toISOString().split('T')[0],\n  score: result.score,\n  rating: result.rating,\n  price: result.price,\n  change_amount: result.changePercent,\n  change_percent: result.changePercent,\n  market_cap: result.marketCap,\n  score_breakdown: result.scoreBreakdown,\n  technicals: {\n    peRatio: result.peRatio,\n    week52High: result.week52High,\n    distanceFrom52High: result.distanceFrom52High\n  },\n  signals: {\n    nearHigh: result.week52High ? (result.price / result.week52High) > 0.9 : false,\n    strongDay: result.changePercent > 2,\n    largeCap: result.marketCap > 10000,\n    momentum: result.changePercent > 1 && result.week52High ? (result.price / result.week52High) > 0.8 : false\n  },\n  rank_position: result.rank,\n  session_id: data.sessionId,\n  user_id: null\n}));\n\nreturn {\n  success: true,\n  timestamp: new Date().toISOString(),\n  sessionId: data.sessionId,\n  userEmail: data.userEmail,\n  summary: summary,\n  results: allResults, // ALL results, not filtered\n  screeningResultsForDB: screeningResultsForDB,\n  metadata: {\n    dataSource: \"Supabase + Finnhub\",\n    workflowVersion: \"5.0\",\n    apiVersion: \"full-universe-all-results\",\n    totalStocksAnalyzed: allResults.length,\n    ratingsIncluded: [\"STRONG BUY\", \"BUY\", \"WEAK BUY\", \"HOLD\", \"WEAK SELL\", \"SELL\", \"STRONG SELL\"],\n    savedAllResults: true\n  }\n};"
      },
      "id": "a9a183a0-24b0-489a-883a-4fde2aaeaf4e",
      "name": "Process ALL Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        304
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/rpc/save_results_and_complete_session",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"p_screening_results\": {{ JSON.stringify($json.screeningResultsForDB || []) }},\n  \"p_session_id\": \"{{ $json.sessionId }}\",\n  \"p_user_email\": \"{{ $json.userEmail }}\",\n  \"p_total_stocks_screened\": {{ $json.summary.totalScreened || 0 }},\n  \"p_total_buy_rated\": {{ $json.summary.totalBuyRated || 0 }},\n  \"p_buy_percentage\": {{ $json.summary.buyPercentage || 0 }},\n  \"p_average_score\": {{ $json.summary.averageScore || 0 }},\n  \"p_average_buy_score\": {{ $json.summary.averageBuyScore || 0 }},\n  \"p_processing_time_seconds\": {{ $json.summary.processingTimeSeconds || 0 }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        304
      ],
      "id": "1416f186-baa7-4052-9a42-46640cb59cf9",
      "name": "Save Screening Results"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Stock screening started successfully\",\n  \"sessionId\": \"{{ $('Create Screening Session').first().json.data }}\",\n  \"userEmail\": \"{{ $json.body.userEmail }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1216,
        208
      ],
      "id": "1935ad31-4576-45ac-b1d3-823c53f7c3de",
      "name": "Early Success Response"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Stock Scoring Algorithm - Research-Based Implementation\n// Weights: Technical (60%), Fundamental (25%), Volume/Momentum (15%)\n\nconst originalData = $('Get Current Stock').first().json;\nconst quoteData = $('Fetch Quote').first().json;\nconst profileData = $('Fetch Profile').first().json;\nconst metricsData = $('Fetch Metrics').first().json;\n\nconst symbol = originalData.currentSymbol;\nconst stockInfo = originalData.currentStockInfo;\n\n// Core Data Extraction with Validation\nconst currentPrice = Math.max(0, quoteData.c || 0);\nconst changePercent = quoteData.dp || 0;\nconst dayHigh = Math.max(0, quoteData.h || 0);\nconst dayLow = Math.max(0, quoteData.l || 0);\nconst openPrice = Math.max(0, quoteData.o || 0);\nconst previousClose = Math.max(0, quoteData.pc || 0);\nconst dailyVolume = Math.max(0, quoteData.v || 0);\n\nconst companyName = stockInfo.name || profileData.name || symbol;\nconst sector = stockInfo.sector || profileData.finnhubIndustry || \"Unknown\";\nconst exchange = stockInfo.exchange || profileData.exchange || \"Unknown\";\nconst marketCapTier = stockInfo.marketCapTier || \"Unknown\";\nconst marketCapValue = Math.max(0, profileData.marketCapitalization || 0);\n\n// Enhanced Metrics Extraction\nconst metrics = metricsData.metric || {};\nconst peRatio = metrics.peBasicExclExtraTTM || metrics.peTTM || null;\nconst forwardPE = metrics.forwardPE || null;\nconst week52High = metrics['52WeekHigh'] || null;\nconst week52Low = metrics['52WeekLow'] || null;\nconst beta = metrics.beta || null;\nconst epsGrowth = metrics.epsGrowthTTMYoy || null;\nconst revenueGrowthTTM = metrics.revenueGrowthTTMYoy || null;\nconst debtToEquity = metrics['totalDebt/totalEquityQuarterly'] || metrics['totalDebt/totalEquityAnnual'] || null;\nconst roe = metrics.roeRfy || metrics.roeTTM || null;\nconst operatingMargin = metrics.operatingMarginTTM || null;\nconst currentRatio = metrics.currentRatioQuarterly || null;\nconst grossMargin = metrics.grossMarginTTM || null;\nconst netMargin = metrics.netProfitMarginTTM || null;\n\n// Volume data (using available fields from your data)\nconst avgVolume10Day = (metrics['10DayAverageTradingVolume'] || 0) * 1000000; // Convert to shares\nconst avgVolume3Month = (metrics['3MonthAverageTradingVolume'] || 0) * 1000000; // Convert to shares\nconst estimatedAvgVolume = avgVolume3Month || avgVolume10Day || (marketCapValue * 0.01); // Fallback estimate\n\n// Price relative performance\nconst priceRelative4Week = metrics['priceRelativeToS&P5004Week'] || null;\nconst priceRelative13Week = metrics['priceRelativeToS&P50013Week'] || null;\nconst priceRelative52Week = metrics['priceRelativeToS&P50052Week'] || null;\nconst monthToDateReturn = metrics['monthToDatePriceReturnDaily'] || null;\nconst yearToDateReturn = metrics['yearToDatePriceReturnDaily'] || null;\n\n// ============ TECHNICAL ANALYSIS SCORING (60% Weight) ============\n\nlet technicalScore = 0;\nconst maxTechnicalPoints = 60;\n\n// 1. Price Momentum Analysis (20 points)\nlet momentumPoints = 0;\nif (currentPrice > 0) {\n  // Daily performance scoring (8 points max)\n  if (changePercent >= 5) momentumPoints += 8;\n  else if (changePercent >= 3) momentumPoints += 6;\n  else if (changePercent >= 1.5) momentumPoints += 4;\n  else if (changePercent >= 0.5) momentumPoints += 2;\n  else if (changePercent > 0) momentumPoints += 1;\n  \n  // 52-week position analysis (8 points max)\n  if (week52High && week52Low && currentPrice > 0) {\n    const weekRange = week52High - week52Low;\n    const positionInRange = weekRange > 0 ? (currentPrice - week52Low) / weekRange : 0;\n    \n    if (positionInRange >= 0.95) momentumPoints += 8;      // Near 52-week high\n    else if (positionInRange >= 0.85) momentumPoints += 6; // Strong position\n    else if (positionInRange >= 0.70) momentumPoints += 4; // Good position\n    else if (positionInRange >= 0.50) momentumPoints += 2; // Above midpoint\n    else if (positionInRange >= 0.30) momentumPoints += 1; // Moderate position\n  }\n  \n  // Distance from 52-week high (4 points max)\n  if (week52High && currentPrice > 0) {\n    const distanceFromHigh = (currentPrice / week52High);\n    if (distanceFromHigh >= 0.98) momentumPoints += 4;      // Very close to high\n    else if (distanceFromHigh >= 0.95) momentumPoints += 3; // Close to high\n    else if (distanceFromHigh >= 0.90) momentumPoints += 2; // Near high\n    else if (distanceFromHigh >= 0.85) momentumPoints += 1; // Approaching high\n  }\n}\ntechnicalScore += Math.min(20, momentumPoints);\n\n// 2. Relative Performance Analysis (15 points)\nlet relativePoints = 0;\n// S&P 500 relative performance (9 points max)\nif (priceRelative13Week !== null) {\n  if (priceRelative13Week >= 15) relativePoints += 5;      // Significantly outperforming\n  else if (priceRelative13Week >= 10) relativePoints += 4; // Strong outperformance\n  else if (priceRelative13Week >= 5) relativePoints += 3;  // Moderate outperformance\n  else if (priceRelative13Week >= 0) relativePoints += 1;  // Slight outperformance\n}\n\nif (priceRelative4Week !== null) {\n  if (priceRelative4Week >= 10) relativePoints += 4;      // Recent strong performance\n  else if (priceRelative4Week >= 5) relativePoints += 3;  // Recent good performance\n  else if (priceRelative4Week >= 2) relativePoints += 2;  // Recent moderate performance\n  else if (priceRelative4Week >= 0) relativePoints += 1;  // Recent slight performance\n}\n\n// Year-to-date performance (6 points max)\nif (yearToDateReturn !== null) {\n  if (yearToDateReturn >= 25) relativePoints += 3;        // Excellent YTD\n  else if (yearToDateReturn >= 15) relativePoints += 2;   // Strong YTD\n  else if (yearToDateReturn >= 5) relativePoints += 1;    // Positive YTD\n}\n\n// Month-to-date performance (3 points max)\nif (monthToDateReturn !== null) {\n  if (monthToDateReturn >= 10) relativePoints += 3;       // Excellent month\n  else if (monthToDateReturn >= 5) relativePoints += 2;   // Strong month\n  else if (monthToDateReturn >= 2) relativePoints += 1;   // Good month\n}\ntechnicalScore += Math.min(15, relativePoints);\n\n// 3. Intraday Strength Analysis (10 points)\nlet intradayPoints = 0;\nif (dayHigh > dayLow && dayHigh > 0 && dayLow > 0) {\n  const dailyRange = dayHigh - dayLow;\n  const pricePosition = dailyRange > 0 ? (currentPrice - dayLow) / dailyRange : 0;\n  \n  // Position within daily range (6 points max)\n  if (pricePosition >= 0.90) intradayPoints += 6;      // Near daily high\n  else if (pricePosition >= 0.75) intradayPoints += 4; // Upper quarter\n  else if (pricePosition >= 0.60) intradayPoints += 2; // Above midpoint\n  else if (pricePosition >= 0.50) intradayPoints += 1; // At midpoint\n  \n  // Gap analysis (4 points max)\n  if (openPrice > 0 && previousClose > 0) {\n    const gapPercent = ((openPrice - previousClose) / previousClose) * 100;\n    if (gapPercent >= 2) intradayPoints += 4;       // Strong gap up\n    else if (gapPercent >= 1) intradayPoints += 2;  // Moderate gap up\n    else if (gapPercent >= 0.5) intradayPoints += 1; // Small gap up\n  }\n}\n// Price above open bonus\nif (currentPrice > openPrice && openPrice > 0) intradayPoints += 2;\ntechnicalScore += Math.min(10, intradayPoints);\n\n// 4. Volatility and Beta Analysis (8 points)\nlet volatilityPoints = 0;\nif (beta !== null && beta > 0) {\n  // Optimal beta range (1.0 - 1.5 for momentum stocks)\n  if (beta >= 1.0 && beta <= 1.5) volatilityPoints += 4;\n  else if (beta >= 0.8 && beta <= 1.8) volatilityPoints += 2;\n  else if (beta >= 0.5 && beta <= 2.5) volatilityPoints += 1;\n}\n\n// Price volatility analysis using daily range\nif (dayHigh > dayLow && dayLow > 0) {\n  const dailyVolatility = ((dayHigh - dayLow) / dayLow) * 100;\n  if (dailyVolatility >= 3 && dailyVolatility <= 8) volatilityPoints += 4; // Good volatility for momentum\n  else if (dailyVolatility >= 1.5 && dailyVolatility <= 10) volatilityPoints += 2; // Acceptable volatility\n  else if (dailyVolatility >= 0.5) volatilityPoints += 1; // Some movement\n}\ntechnicalScore += Math.min(8, volatilityPoints);\n\n// 5. Volume Analysis (7 points)\nlet volumePoints = 0;\nif (dailyVolume > 0 && estimatedAvgVolume > 0) {\n  const relativeVolume = dailyVolume / estimatedAvgVolume;\n  \n  if (relativeVolume >= 2.0) volumePoints += 4;      // Very high volume\n  else if (relativeVolume >= 1.5) volumePoints += 3; // High volume  \n  else if (relativeVolume >= 1.2) volumePoints += 2; // Above average\n  else if (relativeVolume >= 0.8) volumePoints += 1; // Normal volume\n  \n  // Volume surge with price movement\n  if (changePercent > 1 && relativeVolume > 1.2) volumePoints += 2;\n  if (changePercent > 3 && relativeVolume > 1.5) volumePoints += 1;\n}\ntechnicalScore += Math.min(7, volumePoints);\n\n// ============ FUNDAMENTAL ANALYSIS SCORING (25% Weight) ============\n\nlet fundamentalScore = 0;\nconst maxFundamentalPoints = 25;\n\n// 1. Valuation Metrics (10 points)\nlet valuationPoints = 0;\nif (peRatio !== null && peRatio > 0) {\n  // PE ratio scoring (context-dependent)\n  if (peRatio <= 15) valuationPoints += 4;        // Undervalued\n  else if (peRatio <= 25) valuationPoints += 3;   // Fair value\n  else if (peRatio <= 35) valuationPoints += 2;   // Slightly expensive\n  else if (peRatio <= 50) valuationPoints += 1;   // Expensive but acceptable\n}\n\n// Forward PE analysis (if available)\nif (forwardPE !== null && forwardPE > 0) {\n  if (forwardPE <= 20) valuationPoints += 3;      // Good forward valuation\n  else if (forwardPE <= 30) valuationPoints += 2; // Fair forward valuation\n  else if (forwardPE <= 40) valuationPoints += 1; // Acceptable forward valuation\n}\n\n// Market cap tier scoring\nif (marketCapTier === 'Large' || marketCapValue > 10000) valuationPoints += 3;\nelse if (marketCapTier === 'Mid' || marketCapValue > 2000) valuationPoints += 2;\nelse if (marketCapValue > 300) valuationPoints += 1;\n\nfundamentalScore += Math.min(10, valuationPoints);\n\n// 2. Growth Metrics (8 points)\nlet growthPoints = 0;\nif (epsGrowth !== null) {\n  if (epsGrowth >= 25) growthPoints += 4;        // Excellent growth\n  else if (epsGrowth >= 15) growthPoints += 3;   // Strong growth\n  else if (epsGrowth >= 10) growthPoints += 2;   // Good growth\n  else if (epsGrowth >= 5) growthPoints += 1;    // Moderate growth\n}\n\nif (revenueGrowthTTM !== null) {\n  if (revenueGrowthTTM >= 20) growthPoints += 4;    // Excellent revenue growth\n  else if (revenueGrowthTTM >= 15) growthPoints += 3; // Strong revenue growth\n  else if (revenueGrowthTTM >= 10) growthPoints += 2; // Good revenue growth\n  else if (revenueGrowthTTM >= 5) growthPoints += 1;  // Moderate revenue growth\n}\nfundamentalScore += Math.min(8, growthPoints);\n\n// 3. Financial Health (7 points)\nlet healthPoints = 0;\nif (debtToEquity !== null) {\n  if (debtToEquity <= 0.3) healthPoints += 3;     // Very low debt\n  else if (debtToEquity <= 0.6) healthPoints += 2; // Low debt\n  else if (debtToEquity <= 1.0) healthPoints += 1; // Moderate debt\n}\n\nif (roe !== null && roe > 0) {\n  if (roe >= 0.20) healthPoints += 2;        // Excellent ROE (20%+)\n  else if (roe >= 0.15) healthPoints += 1;   // Good ROE (15%+)\n}\n\nif (currentRatio !== null) {\n  if (currentRatio >= 1.5) healthPoints += 2;     // Strong liquidity\n  else if (currentRatio >= 1.2) healthPoints += 1; // Adequate liquidity\n}\nfundamentalScore += Math.min(7, healthPoints);\n\n// ============ VOLUME & MOMENTUM SCORING (15% Weight) ============\n\nlet volumeMomentumScore = 0;\nconst maxVolumeMomentumPoints = 15;\n\n// 1. Price-Volume Relationship (8 points)\nlet priceVolumePoints = 0;\nif (changePercent > 0 && dailyVolume > 0 && estimatedAvgVolume > 0) {\n  const relativeVolume = dailyVolume / estimatedAvgVolume;\n  \n  // Positive correlation between price and volume\n  if (changePercent >= 3 && relativeVolume >= 1.5) priceVolumePoints += 4;\n  else if (changePercent >= 1.5 && relativeVolume >= 1.2) priceVolumePoints += 3;\n  else if (changePercent >= 0.5 && relativeVolume >= 1.0) priceVolumePoints += 2;\n  else if (changePercent > 0) priceVolumePoints += 1;\n}\n\n// Breakout confirmation\nif (week52High && currentPrice > 0 && dailyVolume > 0 && estimatedAvgVolume > 0) {\n  const nearHighThreshold = week52High * 0.95;\n  const relativeVolume = dailyVolume / estimatedAvgVolume;\n  if (currentPrice >= nearHighThreshold && relativeVolume >= 1.3) {\n    priceVolumePoints += 4; // Volume-confirmed breakout\n  }\n}\nvolumeMomentumScore += Math.min(8, priceVolumePoints);\n\n// 2. Momentum Consistency (7 points)\nlet consistencyPoints = 0;\n\n// Multi-timeframe momentum alignment\nif (currentPrice > 0 && changePercent > 0) {\n  if (priceRelative4Week !== null && priceRelative4Week > 0) consistencyPoints += 2;\n  if (priceRelative13Week !== null && priceRelative13Week > 0) consistencyPoints += 2;\n  if (monthToDateReturn !== null && monthToDateReturn > 0) consistencyPoints += 2;\n}\n\n// Sector momentum bonus (large cap outperformance)\nif (marketCapTier === 'Large' && changePercent > 1) consistencyPoints += 1;\nvolumeMomentumScore += Math.min(7, consistencyPoints);\n\n// ============ FINAL SCORE CALCULATION ============\n\nconst rawTotalScore = technicalScore + fundamentalScore + volumeMomentumScore;\nconst totalScore = Math.min(100, Math.max(0, rawTotalScore));\n\n// Enhanced Rating Scale (more granular)\nconst rating = totalScore >= 85 ? 'STRONG BUY' :\n               totalScore >= 70 ? 'BUY' :\n               totalScore >= 55 ? 'WEAK BUY' :\n               totalScore >= 40 ? 'HOLD' :\n               totalScore >= 25 ? 'WEAK SELL' :\n               totalScore >= 15 ? 'SELL' : 'STRONG SELL';\n\n// Calculate additional derived metrics\nconst distanceFrom52High = week52High && currentPrice > 0 ? \n  Number(((currentPrice / week52High) * 100).toFixed(1)) : null;\n\nconst estimatedRelativeVolume = dailyVolume > 0 && estimatedAvgVolume > 0 ? \n  Number((dailyVolume / estimatedAvgVolume).toFixed(2)) : null;\n\n// Create comprehensive stock result\nconst stockResult = {\n  symbol: symbol,\n  name: companyName,\n  sector: sector,\n  exchange: exchange,\n  marketCapTier: marketCapTier,\n  country: stockInfo.country || \"US\",\n  score: totalScore,\n  rating: rating,\n  price: currentPrice,\n  changePercent: changePercent,\n  marketCap: marketCapValue,\n  peRatio: peRatio,\n  forwardPE: forwardPE,\n  beta: beta,\n  week52High: week52High,\n  week52Low: week52Low,\n  distanceFrom52High: distanceFrom52High,\n  estimatedRelativeVolume: estimatedRelativeVolume,\n  \n  // Enhanced score breakdown\n  scoreBreakdown: {\n    technical: technicalScore,\n    fundamental: fundamentalScore,\n    volumeMomentum: volumeMomentumScore,\n    \n    // Sub-component breakdown for transparency\n    momentum: Math.min(20, momentumPoints),\n    relativePerformance: Math.min(15, relativePoints),\n    intradayStrength: Math.min(10, intradayPoints),\n    volatility: Math.min(8, volatilityPoints),\n    volume: Math.min(7, volumePoints),\n    valuation: Math.min(10, valuationPoints),\n    growth: Math.min(8, growthPoints),\n    financialHealth: Math.min(7, healthPoints),\n    priceVolume: Math.min(8, priceVolumePoints),\n    consistency: Math.min(7, consistencyPoints)\n  },\n  \n  // Additional insights\n  insights: {\n    technicalStrength: technicalScore >= 35 ? \"Strong\" : technicalScore >= 25 ? \"Moderate\" : \"Weak\",\n    fundamentalQuality: fundamentalScore >= 18 ? \"High\" : fundamentalScore >= 12 ? \"Medium\" : \"Low\",\n    momentumConfirmation: volumeMomentumScore >= 10 ? \"Confirmed\" : volumeMomentumScore >= 6 ? \"Partial\" : \"Weak\",\n    riskLevel: totalScore >= 70 ? \"Low\" : totalScore >= 50 ? \"Medium\" : \"High\"\n  },\n  \n  dataSource: {\n    company: \"Supabase\",\n    pricing: \"Finnhub\",\n    fundamentals: \"Finnhub\",\n    scoring: \"Enhanced Multi-Factor Model v2.0\"\n  }\n};\n\n// Add to results array\nconst updatedResults = [...originalData.results, stockResult];\nconst nextIndex = originalData.currentIndex + 1;\n\nreturn {\n  ...originalData,\n  results: updatedResults,\n  currentIndex: nextIndex,\n  lastProcessed: symbol\n};"
      },
      "id": "25adb250-adf9-4f06-a01d-82d796b030ad",
      "name": "Score & Filter for ALL Stocks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1008,
        96
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/rpc/cleanup_user_screening_data",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"apikey\": \"{{ $vars.SUPABASE_ANON_KEY }}\",\n  \"Authorization\": \"Bearer {{ $vars.SUPABASE_ANON_KEY }}\",\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"p_user_email\": \"{{ $('Process ALL Results').first().json.userEmail }}\",\n  \"p_session_id\": \"{{ $('Process ALL Results').first().json.sessionId }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -176,
        304
      ],
      "id": "be2987a6-ccae-4868-a057-c81159208882",
      "name": "Clean Old User Data"
    },
    {
      "parameters": {
        "jsCode": "// Get the original data from Process ALL Results\nconst originalData = $('Process ALL Results').first().json;\n\n// The cleanup was successful (we got here), so pass through the original data\nreturn {\n  ...originalData,  // All the original data (sessionId, userEmail, summary, etc.)\n  cleanupCompleted: true,\n  cleanupTimestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        304
      ],
      "id": "9eb60bae-7a2e-49ce-8999-f3639f3f0879",
      "name": "Restore Original Data"
    }
  ],
  "pinData": {},
  "connections": {
    "Screening Trigger": {
      "main": [
        [
          {
            "node": "Security & Email Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Security Result": {
      "main": [
        [
          {
            "node": "Create Screening Session",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Security Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch ALL Stocks from Supabase": {
      "main": [
        [
          {
            "node": "Setup Full Universe Screening",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup Full Universe Screening": {
      "main": [
        [
          {
            "node": "Has More Stocks?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has More Stocks?": {
      "main": [
        [
          {
            "node": "Get Current Stock",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process ALL Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Current Stock": {
      "main": [
        [
          {
            "node": "Rate Limit Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rate Limit Wait": {
      "main": [
        [
          {
            "node": "Fetch Quote",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Quote": {
      "main": [
        [
          {
            "node": "Wait Before Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Before Profile": {
      "main": [
        [
          {
            "node": "Fetch Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Profile": {
      "main": [
        [
          {
            "node": "Wait Before Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Before Metrics": {
      "main": [
        [
          {
            "node": "Fetch Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Metrics": {
      "main": [
        [
          {
            "node": "Score & Filter for ALL Stocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Security & Email Validation": {
      "main": [
        [
          {
            "node": "Check Security Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Screening Session": {
      "main": [
        [
          {
            "node": "Early Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process ALL Results": {
      "main": [
        [
          {
            "node": "Clean Old User Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Early Success Response": {
      "main": [
        [
          {
            "node": "Fetch ALL Stocks from Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screening Results": {
      "main": [
        []
      ]
    },
    "Score & Filter for ALL Stocks": {
      "main": [
        [
          {
            "node": "Has More Stocks?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Old User Data": {
      "main": [
        [
          {
            "node": "Restore Original Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Restore Original Data": {
      "main": [
        [
          {
            "node": "Save Screening Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7a305e8e-ddca-4e50-8012-ed6c06613e4c",
  "meta": {
    "instanceId": "dc4515702488c5504ae75df05e323931136ebd678ba1ac3b500f890886992738"
  },
  "id": "4rhHrUrehyltiKPw",
  "tags": []
}