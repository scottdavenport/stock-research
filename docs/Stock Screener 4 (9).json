{
  "name": "Stock Screener 4",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "3928ca93-6c9c-4b25-ba34-3d6991245531",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "266ea4f1-c825-40e5-a4f5-02628c2e401e",
      "name": "Screening Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2160,
        208
      ],
      "webhookId": "3928ca93-6c9c-4b25-ba34-3d6991245531"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e0e9de8f-edaf-4bc1-8904-8f4f60f1cec5",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1744,
        208
      ],
      "id": "5aa8afad-b58b-4a80-a384-806f7e783508",
      "name": "Check Security Result"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"error\": \"{{ $json.error || 'Authentication failed' }}\",\n  \"message\": \"{{ $json.message || 'Invalid or missing API key' }}\",\n  \"code\": \"UNAUTHORIZED\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {
          "responseCode": "={{ $json.status || 401 }}"
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1360,
        464
      ],
      "id": "805d6f72-8dd9-4591-8680-8264799140a1",
      "name": "Security Error Response"
    },
    {
      "parameters": {
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/stock_universe",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "is_active",
              "value": "eq.true"
            },
            {
              "name": "order",
              "value": "symbol.asc"
            },
            {
              "name": "limit",
              "value": "5"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "677482b9-30c1-4e78-a00e-8f5095971808",
      "name": "Fetch ALL Stocks from Supabase",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -992,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "const requestBody = $('Check Security Result').first().json.body || {};\nconst sessionResponse = $('Create Screening Session').first().json;\nconst allItems = $input.all();\nconst supabaseStocks = allItems.map(item => item.json);\n\n// Extract session ID from Supabase response (handle both object and string formats)\nconst sessionId = sessionResponse.data || sessionResponse;\nconst userEmail = requestBody.userEmail;\n\nconst sectorFilter = requestBody.sector || null;\nconst marketCapFilter = requestBody.marketCap || null;\nconst minScore = requestBody.minScore || 55;\n\nlet filteredStocks = supabaseStocks;\n\n// Fix filtering to handle both 'All Sectors'/'All Caps' and 'All'\nif (sectorFilter && sectorFilter !== 'All Sectors' && sectorFilter !== 'All') {\n  filteredStocks = filteredStocks.filter(stock => \n    stock && stock.sector === sectorFilter\n  );\n}\n\nif (marketCapFilter && marketCapFilter !== 'All Caps' && marketCapFilter !== 'All') {\n  filteredStocks = filteredStocks.filter(stock => \n    stock && stock.market_cap_tier === marketCapFilter\n  );\n}\n\nconst stocksToProcess = filteredStocks;\n\nreturn {\n  stocksToProcess: stocksToProcess,\n  currentIndex: 0,\n  results: [],\n  buyRatedResults: [],\n  totalStocks: stocksToProcess.length,\n  startTime: new Date().toISOString(),\n  sessionId: sessionId,\n  userEmail: userEmail,\n  filters: {\n    sector: sectorFilter,\n    marketCap: marketCapFilter,\n    minScore: minScore,\n    fullUniverseScreen: true\n  }\n};"
      },
      "id": "6827102a-bb5a-4b27-b996-30edcb9eec8e",
      "name": "Setup Full Universe Screening",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        208
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-more-stocks",
              "leftValue": "={{ $json.currentIndex }}",
              "rightValue": "={{ $json.stocksToProcess.length }}",
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9d195c66-e513-44dc-ab8f-3c7f046f2772",
      "name": "Has More Stocks?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -608,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $json;\nconst currentStockObject = data.stocksToProcess[data.currentIndex];\nconst currentSymbol = currentStockObject.symbol;\n\nconst progress = Math.round((data.currentIndex / data.totalStocks) * 100);\nconst elapsed = Math.round((new Date() - new Date(data.startTime)) / 1000);\n\nreturn {\n  ...data,\n  currentSymbol: currentSymbol,\n  currentStockInfo: {\n    symbol: currentStockObject.symbol,\n    name: currentStockObject.name,\n    sector: currentStockObject.sector,\n    marketCapTier: currentStockObject.market_cap_tier,\n    exchange: currentStockObject.exchange,\n    country: currentStockObject.country\n  },\n  progress: {\n    percent: progress,\n    current: data.currentIndex + 1,\n    total: data.totalStocks,\n    elapsedSeconds: elapsed\n  }\n};"
      },
      "id": "ea75e543-9295-40d6-98c8-e16607eb2613",
      "name": "Get Current Stock",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        96
      ]
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "seconds"
      },
      "id": "f7e60dd9-b83d-44f0-8079-5d813d56b815",
      "name": "Rate Limit Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        -208,
        96
      ],
      "webhookId": "545e379b-dad5-435c-ac0d-627c064fd6e8"
    },
    {
      "parameters": {
        "url": "https://finnhub.io/api/v1/quote",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.currentSymbol }}"
            },
            {
              "name": "token",
              "value": "={{ $vars.FINNHUB_API_KEY }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "3cedede8-be93-45d0-8787-b57c740125d4",
      "name": "Fetch Quote",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "unit": "seconds"
      },
      "id": "4bdc68d1-c867-4ff1-a05a-dc213f65e3bd",
      "name": "Wait Before Profile",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        192,
        0
      ],
      "webhookId": "2b993412-5371-442a-9fdf-d828d6f58d62"
    },
    {
      "parameters": {
        "url": "https://finnhub.io/api/v1/stock/profile2",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $('Get Current Stock').first().json.currentSymbol }}"
            },
            {
              "name": "token",
              "value": "={{ $vars.FINNHUB_API_KEY }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "b733444b-8ec3-4684-aa2c-a045c3a760e4",
      "name": "Fetch Profile",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        400,
        0
      ]
    },
    {
      "parameters": {
        "unit": "seconds"
      },
      "id": "a7fcbb5e-690b-4265-aa9e-0b28d0644d0a",
      "name": "Wait Before Metrics",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        592,
        0
      ],
      "webhookId": "9fd8bbcc-a6d7-4214-9c78-ce07717c61d9"
    },
    {
      "parameters": {
        "url": "https://finnhub.io/api/v1/stock/metric",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $('Get Current Stock').first().json.currentSymbol }}"
            },
            {
              "name": "metric",
              "value": "all"
            },
            {
              "name": "token",
              "value": "={{ $vars.FINNHUB_API_KEY }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "29374d19-db51-483c-a5fb-1a7e68f093fc",
      "name": "Fetch Metrics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        816,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "const headers = $json.headers || {};\nconst body = $json.body || {};\nlet providedKey = null;\n\n// Extract API key\nif (headers.authorization) {\n  if (headers.authorization.startsWith('Bearer ')) {\n    providedKey = headers.authorization.replace('Bearer ', '');\n  } else {\n    providedKey = headers.authorization;\n  }\n} else if (body.apiKey) {\n  providedKey = body.apiKey;\n}\n\nconst validKey = $vars.STOCK_SCREENER_API_KEY;\n\nif (!providedKey) {\n  return {\n    error: \"API key required\",\n    message: \"Please provide a valid API key\",\n    status: 401,\n    timestamp: new Date().toISOString()\n  };\n}\n\nif (providedKey !== validKey) {\n  return {\n    error: \"Invalid API key\",\n    message: \"The provided API key is not valid\",\n    status: 401,\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Validate user email is provided\nif (!body.userEmail) {\n  return {\n    error: \"User email required\",\n    message: \"Please provide a valid user email in the request body\",\n    status: 400,\n    timestamp: new Date().toISOString()\n  };\n}\n\nreturn $json;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1952,
        208
      ],
      "id": "040912c7-219c-4745-9a70-8ae20042ef29",
      "name": "Security & Email Validation"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/rpc/upsert_screening_session",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY\t }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.SUPABASE_ANON_KEY\t }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"p_user_email\": \"{{ $json.body.userEmail }}\",\n  \"p_filters\": {{ JSON.stringify($json.body) }},\n  \"p_screening_type\": \"full_universe\"\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1424,
        208
      ],
      "id": "0386eec6-11ae-402b-bbc4-2fe9ebe77948",
      "name": "Create Screening Session"
    },
    {
      "parameters": {
        "jsCode": "const data = $json;\nconst allResults = data.results.filter(r => r.score > 0);\n\n// Sort all results by score (highest first)\nallResults.sort((a, b) => b.score - a.score);\n\n// Add rankings to all results\nallResults.forEach((result, index) => {\n  result.rank = index + 1;\n});\n\n// Calculate comprehensive statistics\nconst ratingCounts = {\n  strongBuy: allResults.filter(r => r.rating === 'STRONG BUY').length,\n  buy: allResults.filter(r => r.rating === 'BUY').length,\n  weakBuy: allResults.filter(r => r.rating === 'WEAK BUY').length,\n  hold: allResults.filter(r => r.rating === 'HOLD').length,\n  weakSell: allResults.filter(r => r.rating === 'WEAK SELL').length,\n  sell: allResults.filter(r => r.rating === 'SELL').length,\n  strongSell: allResults.filter(r => r.rating === 'STRONG SELL').length\n};\n\n// Calculate buy-rated vs sell-rated\nconst buyRated = allResults.filter(r => ['STRONG BUY', 'BUY', 'WEAK BUY'].includes(r.rating));\nconst sellRated = allResults.filter(r => ['WEAK SELL', 'SELL', 'STRONG SELL'].includes(r.rating));\nconst holdRated = allResults.filter(r => r.rating === 'HOLD');\n\nconst summary = {\n  totalScreened: allResults.length,\n  totalBuyRated: buyRated.length,\n  totalSellRated: sellRated.length,\n  totalHoldRated: holdRated.length,\n  buyPercentage: allResults.length > 0 ? Number(((buyRated.length / allResults.length) * 100).toFixed(1)) : 0,\n  sellPercentage: allResults.length > 0 ? Number(((sellRated.length / allResults.length) * 100).toFixed(1)) : 0,\n  holdPercentage: allResults.length > 0 ? Number(((holdRated.length / allResults.length) * 100).toFixed(1)) : 0,\n  processingTime: `${Math.round((new Date() - new Date(data.startTime)) / 1000)} seconds`,\n  processingTimeSeconds: Math.round((new Date() - new Date(data.startTime)) / 1000),\n  averageScore: allResults.length > 0 ? Number((allResults.reduce((sum, r) => sum + r.score, 0) / allResults.length).toFixed(1)) : 0,\n  averageBuyScore: buyRated.length > 0 ? Number((buyRated.reduce((sum, r) => sum + r.score, 0) / buyRated.length).toFixed(1)) : 0,\n  averageSellScore: sellRated.length > 0 ? Number((sellRated.reduce((sum, r) => sum + r.score, 0) / sellRated.length).toFixed(1)) : 0,\n  filters: data.filters || {},\n  allRatings: ratingCounts,\n  scoreDistribution: {\n    above80: allResults.filter(r => r.score >= 80).length,\n    above70: allResults.filter(r => r.score >= 70).length,\n    above60: allResults.filter(r => r.score >= 60).length,\n    above50: allResults.filter(r => r.score >= 50).length,\n    above40: allResults.filter(r => r.score >= 40).length,\n    below40: allResults.filter(r => r.score < 40).length\n  },\n  sectorBreakdown: {},\n  exchangeBreakdown: {},\n  marketCapBreakdown: {}\n};\n\n// Calculate breakdowns for all results\nallResults.forEach(stock => {\n  summary.sectorBreakdown[stock.sector] = (summary.sectorBreakdown[stock.sector] || 0) + 1;\n  summary.exchangeBreakdown[stock.exchange] = (summary.exchangeBreakdown[stock.exchange] || 0) + 1;\n  summary.marketCapBreakdown[stock.marketCapTier] = (summary.marketCapBreakdown[stock.marketCapTier] || 0) + 1;\n});\n\n// Prepare screening results for database insert (ALL results)\nconst screeningResultsForDB = allResults.map(result => ({\n  symbol: result.symbol,\n  screening_date: new Date().toISOString().split('T')[0],\n  score: result.score,\n  rating: result.rating,\n  price: result.price,\n  change_amount: result.changePercent,\n  change_percent: result.changePercent,\n  market_cap: result.marketCap,\n  score_breakdown: result.scoreBreakdown,\n  technicals: {\n    peRatio: result.peRatio,\n    week52High: result.week52High,\n    distanceFrom52High: result.distanceFrom52High\n  },\n  signals: {\n    nearHigh: result.week52High ? (result.price / result.week52High) > 0.9 : false,\n    strongDay: result.changePercent > 2,\n    largeCap: result.marketCap > 10000,\n    momentum: result.changePercent > 1 && result.week52High ? (result.price / result.week52High) > 0.8 : false\n  },\n  rank_position: result.rank,\n  session_id: data.sessionId,\n  user_id: null\n}));\n\nreturn {\n  success: true,\n  timestamp: new Date().toISOString(),\n  sessionId: data.sessionId,\n  userEmail: data.userEmail,\n  summary: summary,\n  results: allResults, // ALL results, not filtered\n  screeningResultsForDB: screeningResultsForDB,\n  metadata: {\n    dataSource: \"Supabase + Finnhub\",\n    workflowVersion: \"5.0\",\n    apiVersion: \"full-universe-all-results\",\n    totalStocksAnalyzed: allResults.length,\n    ratingsIncluded: [\"STRONG BUY\", \"BUY\", \"WEAK BUY\", \"HOLD\", \"WEAK SELL\", \"SELL\", \"STRONG SELL\"],\n    savedAllResults: true\n  }\n};"
      },
      "id": "a9a183a0-24b0-489a-883a-4fde2aaeaf4e",
      "name": "Process ALL Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        304
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/screening_results",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.screeningResultsForDB || $json.results || [] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        304
      ],
      "id": "1416f186-baa7-4052-9a42-46640cb59cf9",
      "name": "Save Screening Results"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Stock screening started successfully\",\n  \"sessionId\": \"{{ $('Create Screening Session').first().json.data }}\",\n  \"userEmail\": \"{{ $json.body.userEmail }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1216,
        208
      ],
      "id": "1935ad31-4576-45ac-b1d3-823c53f7c3de",
      "name": "Early Success Response"
    },
    {
      "parameters": {
        "jsCode": "const originalData = $('Get Current Stock').first().json;\nconst quoteData = $('Fetch Quote').first().json;\nconst profileData = $('Fetch Profile').first().json;\nconst metricsData = $('Fetch Metrics').first().json;\n\nconst symbol = originalData.currentSymbol;\nconst stockInfo = originalData.currentStockInfo;\n\nconst currentPrice = quoteData.c || 0;\nconst changePercent = quoteData.dp || 0;\nconst dayHigh = quoteData.h || 0;\nconst dayLow = quoteData.l || 0;\nconst openPrice = quoteData.o || 0;\n\nconst companyName = stockInfo.name || profileData.name || symbol;\nconst sector = stockInfo.sector || profileData.finnhubIndustry || \"Unknown\";\nconst exchange = stockInfo.exchange || profileData.exchange || \"Unknown\";\nconst marketCapTier = stockInfo.marketCapTier || \"Unknown\";\n\nconst marketCapValue = profileData.marketCapitalization || 0;\nconst metrics = metricsData.metric || {};\nconst peRatio = metrics.peBasicExclExtraTTM || null;\nconst week52High = metrics['52WeekHigh'] || null;\n\nlet momentumScore = 0;\nlet qualityScore = 0;\nlet technicalScore = 0;\n\nif (currentPrice > 0) {\n  if (changePercent > 5) momentumScore += 15;\n  else if (changePercent > 3) momentumScore += 12;\n  else if (changePercent > 1) momentumScore += 8;\n  else if (changePercent > 0) momentumScore += 4;\n  \n  if (week52High) {\n    const dist = (currentPrice / week52High) * 100;\n    if (dist > 95) momentumScore += 25;\n    else if (dist > 90) momentumScore += 20;\n    else if (dist > 80) momentumScore += 15;\n    else if (dist > 70) momentumScore += 10;\n  }\n}\n\nif (marketCapTier === 'Large' || marketCapValue > 10000) qualityScore += 15;\nelse if (marketCapTier === 'Mid' || marketCapValue > 1000) qualityScore += 12;\nelse if (marketCapValue > 100) qualityScore += 8;\n\nif (peRatio && peRatio > 0 && peRatio < 30) qualityScore += 15;\nelse if (peRatio && peRatio < 50) qualityScore += 10;\n\nif (currentPrice > openPrice) technicalScore += 15;\nif (dayHigh > dayLow && currentPrice > 0) {\n  const rangePos = (currentPrice - dayLow) / (dayHigh - dayLow);\n  if (rangePos > 0.8) technicalScore += 15;\n  else if (rangePos > 0.6) technicalScore += 10;\n  else if (rangePos > 0.4) technicalScore += 5;\n}\n\nconst totalScore = Math.min(100, momentumScore + qualityScore + technicalScore);\n\n// Updated rating scale\nconst rating = totalScore >= 90 ? 'STRONG BUY' :\n               totalScore >= 75 ? 'BUY' :\n               totalScore >= 60 ? 'WEAK BUY' :\n               totalScore >= 45 ? 'HOLD' :\n               totalScore >= 30 ? 'WEAK SELL' :\n               totalScore >= 15 ? 'SELL' : 'STRONG SELL';\n\nconst stockResult = {\n  symbol: symbol,\n  name: companyName,\n  sector: sector,\n  exchange: exchange,\n  marketCapTier: marketCapTier,\n  country: stockInfo.country || \"US\",\n  score: totalScore,\n  rating: rating,\n  price: currentPrice,\n  changePercent: changePercent,\n  marketCap: marketCapValue,\n  peRatio: peRatio,\n  week52High: week52High,\n  distanceFrom52High: week52High ? ((currentPrice / week52High) * 100).toFixed(1) : null,\n  scoreBreakdown: {\n    momentum: momentumScore,\n    quality: qualityScore,\n    technical: technicalScore\n  },\n  dataSource: {\n    company: \"Supabase\",\n    pricing: \"Finnhub\",\n    fundamentals: \"Finnhub\"\n  }\n};\n\n// Add ALL results, not just buy-rated ones\nconst updatedResults = [...originalData.results, stockResult];\n\nconst nextIndex = originalData.currentIndex + 1;\n\nreturn {\n  ...originalData,\n  results: updatedResults,\n  currentIndex: nextIndex,\n  lastProcessed: symbol\n};"
      },
      "id": "25adb250-adf9-4f06-a01d-82d796b030ad",
      "name": "Score & Filter for ALL Stocks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1008,
        96
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/rpc/cleanup_user_screening_data",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"apikey\": \"{{ $vars.SUPABASE_ANON_KEY }}\",\n  \"Authorization\": \"Bearer {{ $vars.SUPABASE_ANON_KEY }}\",\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"p_user_email\": \"{{ $('Process ALL Results').first().json.userEmail }}\",\n  \"p_session_id\": \"{{ $('Process ALL Results').first().json.sessionId }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -176,
        304
      ],
      "id": "be2987a6-ccae-4868-a057-c81159208882",
      "name": "Clean Old User Data"
    },
    {
      "parameters": {
        "jsCode": "// Get the original data from Process ALL Results\nconst originalData = $('Process ALL Results').first().json;\n\n// The cleanup was successful (we got here), so pass through the original data\nreturn {\n  ...originalData,  // All the original data (sessionId, userEmail, summary, etc.)\n  cleanupCompleted: true,\n  cleanupTimestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        32,
        304
      ],
      "id": "9eb60bae-7a2e-49ce-8999-f3639f3f0879",
      "name": "Restore Original Data"
    }
  ],
  "pinData": {},
  "connections": {
    "Screening Trigger": {
      "main": [
        [
          {
            "node": "Security & Email Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Security Result": {
      "main": [
        [
          {
            "node": "Create Screening Session",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Security Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch ALL Stocks from Supabase": {
      "main": [
        [
          {
            "node": "Setup Full Universe Screening",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup Full Universe Screening": {
      "main": [
        [
          {
            "node": "Has More Stocks?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has More Stocks?": {
      "main": [
        [
          {
            "node": "Get Current Stock",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process ALL Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Current Stock": {
      "main": [
        [
          {
            "node": "Rate Limit Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rate Limit Wait": {
      "main": [
        [
          {
            "node": "Fetch Quote",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Quote": {
      "main": [
        [
          {
            "node": "Wait Before Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Before Profile": {
      "main": [
        [
          {
            "node": "Fetch Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Profile": {
      "main": [
        [
          {
            "node": "Wait Before Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Before Metrics": {
      "main": [
        [
          {
            "node": "Fetch Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Metrics": {
      "main": [
        [
          {
            "node": "Score & Filter for ALL Stocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Security & Email Validation": {
      "main": [
        [
          {
            "node": "Check Security Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Screening Session": {
      "main": [
        [
          {
            "node": "Early Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process ALL Results": {
      "main": [
        [
          {
            "node": "Clean Old User Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Early Success Response": {
      "main": [
        [
          {
            "node": "Fetch ALL Stocks from Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Screening Results": {
      "main": [
        []
      ]
    },
    "Score & Filter for ALL Stocks": {
      "main": [
        [
          {
            "node": "Has More Stocks?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Old User Data": {
      "main": [
        [
          {
            "node": "Restore Original Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Restore Original Data": {
      "main": [
        [
          {
            "node": "Save Screening Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "21230e25-c8e7-419c-bf07-a036e6b60d8a",
  "meta": {
    "instanceId": "dc4515702488c5504ae75df05e323931136ebd678ba1ac3b500f890886992738"
  },
  "id": "4rhHrUrehyltiKPw",
  "tags": []
}